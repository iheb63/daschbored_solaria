import streamlit as st
import pandas as pd 
import plotly.express as px
import PIL
from PIL import Image
import numpy as np 
import mysql.connector
import time
import requests
import streamlit as st
from streamlit_lottie import st_lottie
from datetime import date
import psycopg2



st.set_page_config(
    page_title="solaria daschbored",
    page_icon= "üè©",
    layout="wide"
)



st.markdown("<h1 style=' color: rgb(0, 255, 255); font-size: 100px; text-align: center;'>-üåûsolaria KPI-</h1>", unsafe_allow_html=True)

logo =  Image.open("logo.png")
st.sidebar.success("select a page    :arrow_up:")

st.sidebar.image(logo)
#____________music-app___________________

audio_file = open('music.mp3', 'rb')
audio_bytes = audio_file.read()

st.sidebar.audio(audio_bytes, format='audio/ogg')

sample_rate = 44100  # 44100 samples per second
seconds = 2  # Note duration of 2 seconds
frequency_la = 440  # Our played note will be 440 Hz
# Generate array with seconds*sample_rate steps, ranging between 0 and seconds
t = np.linspace(0, seconds, seconds * sample_rate, False)
# Generate a 440 Hz sine wave
note_la = np.sin(frequency_la * t * 2 * np.pi)


#-----------------------------------------data from my sql---------------------------------------------------------------------------
#data-control revenues
# data CR
#cnx = mysql.connector.connect(user='root', host='localhost', database='solaria')
#query = "SELECT * FROM Data_CR"
#df0 = pd.read_sql(query, con=cnx)
#cnx.close()

# data CR postgre
# Establish a connection to PostgreSQL
cnx = psycopg2.connect("postgres://iheb:3oO6ZpxwsB3iKuwe1oqO2YaHIzMI9vyt@dpg-chgh7ou7avjbbjpn4h50-a.oregon-postgres.render.com/solaria")
# Query 1: data_cr
query1 = "SELECT * FROM \"controle revenu\""
df0 = pd.read_sql(query1, con=cnx)

# data prevision revenue
#cnx = mysql.connector.connect(user='root', host='localhost', database='solaria')
#query_p_r = "SELECT * FROM prevision_revenue"
#df0_revznue_prev = pd.read_sql(query_p_r, con=cnx)
#cnx.close()

query_p_r = "SELECT * FROM prevision_revenue"
df0_revznue_prev = pd.read_sql(query_p_r, con=cnx)


# data GRH
#cnx = mysql.connector.connect(user='root', host='localhost', database='solaria')
#query_personnel = "SELECT * FROM `charge personnel`"
#df_personnel = pd.read_sql(query_personnel, con=cnx)
#cnx.close()

cursor = cnx.cursor()
query_personnel = "SELECT * FROM \"charge personnel\""
cursor.execute(query_personnel)
rows = cursor.fetchall()
df_personnel = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])

# data control couts
#cnx = mysql.connector.connect(user='root', host='localhost', database='solaria')
#query_couts_s = "SELECT * FROM `controle achats sortie`"
#df_couts_s = pd.read_sql(query_couts_s, con=cnx)
#cnx.close()
cursor = cnx.cursor()
query_occupation = "SELECT * FROM \"suivie occupation chambre\""
cursor.execute(query_occupation)
rows = cursor.fetchall()
df_occupation = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])


cursor = cnx.cursor()
query_couts_s = "SELECT * FROM \"controle achats sortie\""
cursor.execute(query_couts_s)
rows = cursor.fetchall()
df_couts_s = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])

# data revenue restauration 
#cnx = mysql.connector.connect(user='root', host='localhost', database='solaria')
#query_r_restauration = "SELECT * FROM `data revenue restauration`"
#df_r_restauration = pd.read_sql(query_r_restauration, con=cnx)
#cnx.close()

cnx = psycopg2.connect("postgres://iheb:3oO6ZpxwsB3iKuwe1oqO2YaHIzMI9vyt@dpg-chgh7ou7avjbbjpn4h50-a.oregon-postgres.render.com/solaria")
cursor = cnx.cursor()
query_r_restauration = "SELECT * FROM \"data revenue restauration\""
cursor.execute(query_r_restauration)
rows = cursor.fetchall()
df_r_restauration = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])
cursor.close()
cnx.close()

#--------------------------------------------------------filtre les donnes----------------------------------------------------------

#Date d√©partDate d√©part
# filtre pour les dataframe control revenue
st.sidebar.title("üìäKPI revenues")
st.sidebar.write("--------------------")
st.sidebar.title("üìÜKPI l'activite hebergement")
df0['Date arrives'] = pd.to_datetime(df0['Date arrives'])
# Extract months and create a new column 'month_column'
df0['month_column'] = df0['Date arrives'].dt.month
df0['years_column'] = df0['Date arrives'].dt.year
years = st.sidebar.multiselect(
    "Select Year(s) for KPI",
    options=df0["years_column"].unique(),  # Update column name here
    default=df0["years_column"].unique(),  # Update column name here
    key="years_r")  # Add a unique key argument

mois = st.sidebar.multiselect(
    "Select Month(s) for KPI",
    options=df0["month_column"].unique(),
    default=df0["month_column"].unique(),
    key="mois_r")

# Apply filters to the DataFrame
df = df0[(df0["month_column"].isin(mois)) & (df0["years_column"].isin(years))]  # Update column name here



# ***************filtre pour les dataframe control revenue(restauration)


st.sidebar.title("üìÜKPI l'activite restauration")
df_r_restauration['Date'] = pd.to_datetime(df_r_restauration['Date'])
# Extract months and create a new column 'month_column'
df_r_restauration['month_column'] = df_r_restauration['Date'].dt.month
df_r_restauration['years_column'] = df_r_restauration['Date'].dt.year

years_r_restauration = st.sidebar.multiselect(
    "Select Year(s) for KPI",
    options=df_r_restauration["years_column"].unique(),
    default=df_r_restauration["years_column"].unique(),
    key="years_r_restauration")  # Add a unique key argument

mois_r_restauration = st.sidebar.multiselect(
    "Select Month(s) for KPI",
    options=df_r_restauration["month_column"].unique(),
    default=df_r_restauration["month_column"].unique(),
    key="mois_r_restauration")  # Add a unique key argument

df_r_restauration_filtre = df_r_restauration[(df_r_restauration["month_column"].isin(mois_r_restauration)) & (df_r_restauration["years_column"].isin(years_r_restauration))]  # Update column name here


#****************filtre pour les dataframe GRH
st.sidebar.title("üìäles KPI couts")
st.sidebar.write("--------------------")
st.sidebar.title("üìÜles KPI l'activite hebergement")
years_GRH = st.sidebar.multiselect(
    "Select Year(s) pour les donnes liee a la GRH",
    options=df_personnel["Ann√©e"].unique(),  # Update column name here
    default=df_personnel["Ann√©e"].unique(),
    key="years_GRH")  
mois_GRH = st.sidebar.multiselect(
    "Select Year(s) pour les donnes liee a la GRH",
    options=df_personnel["Mois"].unique(),  # Update column name here
    default=df_personnel["Mois"].unique(),
    key="mois_GRH")  

df_personnel_filtre = df_personnel[(df_personnel["Mois"].isin(mois_GRH)) & (df_personnel["Ann√©e"].isin(years_GRH))]  # Update column name here

#****************filtre pour les dataframe controle couts sortie 

st.sidebar.title("üìÜles KPI l'activite restauration")
df_couts_s['date'] = pd.to_datetime(df_couts_s['date'])
# Extract months and create a new column 'month_column'
df_couts_s['month_column'] = df_couts_s['date'].dt.month
df_couts_s['years_column'] = df_couts_s['date'].dt.year

years_df_couts_s = st.sidebar.multiselect(
    "Select Year(s) pour les donnes liee a les sorties",
    options=df_couts_s["years_column"].unique(),
    default=df_couts_s["years_column"].unique(),
    key="years_df_couts_s")  # Add a unique key argument

mois_df_couts_s = st.sidebar.multiselect(
    "Select Month(s) pour les donnes liee a les sorties",
    options=df_couts_s["month_column"].unique(),
    default=df_couts_s["month_column"].unique(),
    key="mois_df_couts_s")  # Add a unique key argument

df_couts_s_filtre = df_couts_s[(df_couts_s["month_column"].isin(mois_df_couts_s)) & (df_couts_s["years_column"].isin(years_df_couts_s))]  # Update column name here



#---------------------------------------les indicateur performance ---------------------------------------------------------------------------------
st.markdown("<h1 style=' color: rgb(255, 195, 0); font-size: 50px; text-align: center;'>üìä les indicateur de performance de l'h√¥tel</h1>", unsafe_allow_html=True)

st.write("-----------------")
st.markdown("<h1 style=' font-size: 40px;color:rgb(255,69,0);'>üõå l'activite hebergement</h1>", unsafe_allow_html=True)


df_occupation['NBch'] = df_occupation[['nombre de chambres r√©serv√©e1','nombre de chambres r√©serv√©e2','nombre de chambres r√©serv√©e3','nombre de chambres r√©serv√©e4','nombre de chambres r√©serv√©e5','nombre de chambres r√©serv√©e6','nombre de chambres r√©serv√©e7','nombre de chambres r√©serv√©e8','nombre de chambres r√©serv√©e9','nombre de chambres r√©serv√©e10','nombre de chambres r√©serv√©e11']].sum(axis=1)
NBch = df_occupation['NBch']
NBch_dispo = 239
taux_docupation = (NBch/NBch_dispo)*100
taux_docupation = round(taux_docupation, 2) # Arrondir √† 2 d√©cimales
df_occupation["taux d'ocupation"] = taux_docupation

fig = px.area(df_occupation, x='Date', y="taux d'ocupation",text="taux d'ocupation",width=600,title="üéØtaux d'ocupation")


#revenu_moyen_chambre
df_regroupe_jours = df.groupby(df["Date arrives"]).sum()
df_regroupe_jours = df_regroupe_jours.reset_index()
revenu_moyen_chambre = df_regroupe_jours["CA totale"]/NBch
df_regroupe_jours["revenu moyen chambre"] = revenu_moyen_chambre

fig11 = px.area(df_regroupe_jours, y="revenu moyen chambre", x="Date arrives", title="üéØrevenu moyen chambre")


left_column, right_column = st.columns(2)
with right_column:
    st.write(fig)
    with st.expander("üîëexplexation"):
         st.write("""
Int√©r√™t :         
Il permet de traduire le nombre de chambres lou√©es en % par rapport √† la
capacit√© totale en chambres offertes. Autrement formul√©, et d‚Äôune mani√®re
statique, c‚Äôest r√©pondre √† la question suivante : Combien avons-nous lou√© de
chambres ?
Sur le plan dynamique, le taux d‚Äôoccupation nous renseigne sur la capacit√©
commerciale de la brigade de r√©ception et celle de l‚Äô√©quipe de la force de vente
(L‚Äôagressivit√© commerciale). On peut le calculer pour une journ√©e, une d√©cade,
un mois... 
    """)
with left_column:
    st.write(fig11)
    with st.expander("üîëexplexation"):
         st.write("""
Int√©r√™t :       
Il permet de mesurer l‚Äôeffet de la variation combin√©e de l‚Äôoccupation des
chambres et du prix moyen par chambre lou√©e, r√©alisant ainsi une synth√®se de la
performance commerciale de l‚Äô√©tablissement. Pour beaucoup de responsables
h√¥teliers, le ¬´ Yield ¬ª est aujourd‚Äôhui le principal indicateur de performance de
l‚Äôh√¥tel.
    """)



REVPAR = df_regroupe_jours["Revenue H√©bergement"]/239
df_regroupe_jours["REVPAR"] = REVPAR

LADR = df_regroupe_jours["Revenue H√©bergement"]/NBch
df_regroupe_jours["L'ADR"]= LADR
st.write(df_regroupe_jours)
x_values = df_regroupe_jours["Date arrives"]
y_values = [df_regroupe_jours["REVPAR"], df_regroupe_jours["L'ADR"]]
fig2 = px.bar(df_regroupe_jours, x=x_values, y=y_values, barmode='group', title="üéØREVPAR L'ADR CA totale")


nb_arrives = df_regroupe_jours['nombre de voyageurs']
nb_nuites = df_regroupe_jours['Nombre nuits']
duree_moyenne = nb_nuites/nb_arrives
df_regroupe_jours["duree_moyenne"]= duree_moyenne


fig_duree_moyenne = px.area(df_regroupe_jours, y = "duree_moyenne",x="Date arrives",width=600,title="üéØduree moyenne de se jour")


left_column, right_column = st.columns(2)
with right_column:
        st.write(fig_duree_moyenne)
        with st.expander("üîëexplexation"):
         st.write("""
Formule :
NBRE DE NUITEES/NBRE DES ARRIVEES

Int√©r√™t :
D‚Äôune part, il nous renseigne sur le type de client√®le (de passage, de s√©jour),
d‚Äôautre part, il permet de juger la capacit√© de l‚Äôh√¥tel √† retenir et √† prolonger la
dur√©e de la pr√©sence du client. Son calcul s¬∑effectue sur une p√©riode
d√©termin√©e : une semaine, un mois,         



    """)
with left_column:
    st.write(fig2)
    with st.expander("üîëexplexation"):
       st.write("""
L‚ÄôADR (average daily rate) est le prix moyen quotidien de vos chambres

Int√©r√™t :
Le REVPAR (revenue per available room) repr√©sente le revenu par chambre disponible. Ceci signifie qu‚Äôune chambre en particulier peut √™tre lou√©e pendant la p√©riode observ√©e. Cet indicateur m√©trique est calcul√© en multipliant l‚ÄôADR par le taux d‚Äôoccupation. Il sert √† d√©terminer le prix moyen affich√© pour les chambres disponibles. Prenons un exemple sur un mois. 
le chiffre d'affaire d'une entreprise correspond √† la somme des ventes effectu√©es par celle-ci. Il peut √™tre dit HT (hors taxes) ou peut inclure la TVA (Taxe sur la Valeur Ajout√©e), auquel cas on parle de chiffre d'affaires TTC (toutes charges comprises).          
 
       """)




prevue_financiere = df0_revznue_prev["Revenue H√©bergement"].sum()
realisation_financiere =df0["Revenue H√©bergement"].sum()

taux_realisation_financiere = (realisation_financiere/prevue_financiere)*100



# Cr√©ation d'un DataFrame fictif pour les donn√©es
df_taux_realisation_financiere = pd.DataFrame({'Cat√©gories': ['Pr√©vue', 'R√©alis√©e'],
                   'Valeurs': [prevue_financiere, realisation_financiere]})

# Calcul du taux de r√©alisation financi√®re en pourcentage
taux_realisation = (realisation_financiere / prevue_financiere) * 100

# Cr√©ation du graphique de barre de progression
fig_taux_realisation = px.bar(df_taux_realisation_financiere, y='Cat√©gories', x='Valeurs', text='Valeurs',width=1100)

# Personnalisation du graphique
fig_taux_realisation.update_traces(marker_color=['lightgray', 'limegreen'], # Couleurs des barres
                  hoverinfo='none', # D√©sactivation des informations au survol
                  texttemplate='%{y:,.0f}', # Format du texte affich√© sur les barres
                  textposition='inside') # Position du texte √† l'int√©rieur des barres

# Ajout d'une annotation pour afficher le taux de r√©alisation
fig_taux_realisation.add_annotation(y='R√©alis√©e', x=realisation_financiere, 
                   text=f'{taux_realisation:.2f}%', showarrow=False)

# Mise en forme du titre et des axes
fig_taux_realisation.update_layout(
                  xaxis_title_text='Cat√©gories',
                  yaxis_title_text='Valeurs')

# Affichage du graphique
st.markdown("<h1 style=' font-size: 30px;'>üéØTaux de la realisation financiere revenue hebergement</h1>", unsafe_allow_html=True)            
st.write(fig_taux_realisation)
with st.expander("üîëexplexation"):
       st.write("""
Formule :
C.A. TOTAL REALISE EN LOCATION/C.A. POTENTIEL 

Int√©r√™t:
 Il permet de conna√Ætre le manque √† gagner de la sous-location et donc,
d‚Äôengager les actions n√©cessaires.

    """)

    
st.markdown("<h1 style=' font-size: 40px;color:rgb(255,69,0);'>üç¥  l'activite restauration</h1>", unsafe_allow_html=True)

st.write("---------------------")

nombre_de_repas = df_r_restauration_filtre["Nombre repas servie"].sum()
taux_remplissage = nombre_de_repas/(300*3*30)


ca_restauration = df_r_restauration_filtre["Revenue restaurations"].sum()
nombre_de_couvert_servis = df_r_restauration_filtre["Nombre de couvert servis"].sum()
ticket_moyen = round(ca_restauration/nombre_de_couvert_servis,3)


nb_chaise = 300 
nombre_de_couvert_servis_columns = df_r_restauration_filtre["Nombre de couvert servis"]
taux_occupation_chaise = nombre_de_couvert_servis_columns/nb_chaise
df_r_restauration_filtre["taux_occupation_chaise"]=taux_occupation_chaise

fig_taux_occupation_chaise = px.line(df_r_restauration_filtre, x='Date', y="taux_occupation_chaise",width=600)




prevue_financiere_restauration = df0_revznue_prev["Revenue restaurations"].sum()
realisation_financiere_restauration =df0["Revenue restaurations"].sum()




# Cr√©ation d'un DataFrame fictif pour les donn√©es
df_taux_realisation_financiere_r = pd.DataFrame({'Cat√©gories': ['Pr√©vue', 'R√©alis√©e'],
                   'Valeurs': [prevue_financiere_restauration, realisation_financiere_restauration]})

# Calcul du taux de r√©alisation financi√®re en pourcentage
taux_realisation_financiere_r = (realisation_financiere_restauration/prevue_financiere_restauration)*100


# Cr√©ation du graphique de barre de progression
fig_taux_realisation_r = px.bar(df_taux_realisation_financiere_r, y='Cat√©gories', x='Valeurs', text='Valeurs',width=1100)

# Personnalisation du graphique
fig_taux_realisation_r.update_traces(marker_color=['lightgray', 'limegreen'], # Couleurs des barres
                  hoverinfo='none', # D√©sactivation des informations au survol
                  texttemplate='%{y:,.0f}', # Format du texte affich√© sur les barres
                  textposition='inside') # Position du texte √† l'int√©rieur des barres

# Ajout d'une annotation pour afficher le taux de r√©alisation
fig_taux_realisation_r.add_annotation(y='R√©alis√©e', x=realisation_financiere_restauration, 
                   text=f'{taux_realisation_financiere_r:.2f}%', showarrow=False)

# Mise en forme du titre et des axes
fig_taux_realisation_r.update_layout(
                  xaxis_title_text='Cat√©gories',
                  yaxis_title_text='Valeurs')


col1,col2 =st.columns(2)
with col1:
     st.markdown("<h1 style=' font-size: 30px;'>üéØle taux de remplissage</h1>", unsafe_allow_html=True) 
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{taux_remplissage:.2%}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""formule:
(Nombre de repas servis/ (nombre de place disponible*nombre de service*nombre de jours d‚Äôexploitations*100

Int√©r√™t :
C‚Äôest l‚Äô√©quivalent du taux d‚Äôoccupation en h√©bergement, il nous renseigne sur le
nombre de repas que le restaurant a vendu.

    """)
     st.markdown("<h1 style=' font-size: 30px;'>üéØle ticket moyen</h1>", unsafe_allow_html=True)
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{ticket_moyen}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
        Formule :
CA d‚Äôune p√©riode/Nb total de couverts servis sur la m√™me p√©riode

Int√©r√™t :
Il nous permet de connaitre la d√©pense moyenne consentie par les clients.

    """)


with col2:
     st.markdown("<h1 style=' font-size: 30px;'>üéØle taux d'occupation de la chaise par jour</h1>", unsafe_allow_html=True)
     st.write(fig_taux_occupation_chaise)
     with st.expander("üîëexplexation"):
       st.write("""
Formule :
Nombre de couverts servis/Nombre de chaises

Int√©r√™t :
Il permet de nous indiquer le taux de rotation de la chaise
    """)
       
st.markdown("<h1 style=' font-size: 30px;'>üéØTaux de la realisation financiere Revenue restaurations</h1>", unsafe_allow_html=True)
st.write(fig_taux_realisation_r)  
with st.expander("üîëexplexation"):
       st.write("""
Formule :
(C.A realise en restauration /C.A. POTENTIEL)*100

Int√©r√™t :
Il permet de conna√Ætre le manque √† gagner de la rsetauration et donc,
d‚Äôengager les actions n√©cessaires.
       """)

st.write(df_r_restauration_filtre)

#---------------------------------------les indicateur  couts ---------------------------------------------------------------------------------


st.markdown("<h1 style='  color: rgb(255, 195, 0); font-size: 50px; text-align: center;'>üìä les indicateur de performance liee aux couts</h1>", unsafe_allow_html=True)
st.markdown("<h1 style=' font-size: 40px;color:rgb(255,69,0);'>üõå l'activite hebergement</h1>", unsafe_allow_html=True)
st.write("------------------")

nb_salaries = df_personnel_filtre["Matricule"].count()

nombre_chambre_de_periode =  df_occupation['NBch'].sum()
rendement_employe= round(nombre_chambre_de_periode/nb_salaries,3)

df_salaries_etage = df_personnel_filtre[df_personnel_filtre.D√©partement=="ETAGE"]

jour_travaille_etage=df_salaries_etage["jours travaile"].sum()
huere_travaille_etage =jour_travaille_etage*8
st.write(huere_travaille_etage)
st.write(nombre_chambre_de_periode)
st.write(df_salaries_etage)
Rendement_etage = round(nombre_chambre_de_periode / huere_travaille_etage,3)

col1,col2 =st.columns(2)
with col1:
     st.markdown("<h1 style=' font-size: 30px;'>üéØRendement par employe (par mois)</h1>", unsafe_allow_html=True) 
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{rendement_employe}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
Formule :
(NBRE DE CHAMBRES DISPONIBLES OU DE CHAMBRES LOUEES)/(NBRE DE SALARIES)

Int√©r√™t :
Ce ratio indique l‚Äôeffectif moyen par chambre disponible ou lou√©e. Il est calcul√©
pour l‚Äôensemble de l‚Äô√©tablissement de l‚Äô√©tablissement ou pour un service donn√©.
Il d√©pend de la cat√©gorie de l‚Äô√©tablissement et permet des comparaisons avec les
statistiques professionnelles
    """)

with col2:
     st.markdown("<h1 style=' font-size: 30px;'>üéØRendement au service etage (par mois)</h1>", unsafe_allow_html=True)
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{Rendement_etage}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
Formule :
(NBRE DE CHAMBRES LOUEES)/ (NBRE D‚ÄôHEURES DU PERSONNEL ETAGE)

Int√©r√™t :
Il nous indique sur le rendement du service des √©tages. Il est tr√®s utilis√© dans
tous les √©tablissements h√¥teliers qui ne sous traitent pas cette activit√©
    """)

st.markdown("<h1 style=' font-size: 40px;color:rgb(255,69,0);'>üç¥  l'activite restauration</h1>", unsafe_allow_html=True)

cout_nourriture_vendues  = df_couts_s_filtre["Nourriture"].sum()
totale_vendue_nourriture = df_r_restauration_filtre["ventes nourriture"].sum()
cout_nourriture =round((cout_nourriture_vendues/totale_vendue_nourriture)*100,3)


cout_boisson_vendues = df_couts_s_filtre["Boisson"].sum()
totale_vendue_boisson = df_r_restauration_filtre["ventes boissons"].sum()
cout_boisson =round((cout_boisson_vendues/totale_vendue_boisson)*100,3)

cout_fb = df_couts_s_filtre["totale COUTS F&B"].sum()
Revenue_restaurations= df_r_restauration_filtre["Revenue restaurations"].sum()
cout_matiere =round((cout_fb/Revenue_restaurations)*100,3)


total_couvert_servie =df_r_restauration_filtre["Nombre de couvert servis"].sum()
df_salaries_CUISINE = df_personnel_filtre[df_personnel_filtre.D√©partement=="CUISINE"]
NB_JOURS_salaries_CUISINE = df_salaries_CUISINE["jours travaile"].sum()
nb_heure_travaille_salaries_CUISINE = NB_JOURS_salaries_CUISINE*8
efficacite_personnel = round(nb_heure_travaille_salaries_CUISINE/total_couvert_servie,3)



col1,col2 =st.columns(2)
with col1:
     st.markdown("<h1 style=' font-size: 30px;'>üéØLe cout nourriture(par mois)</h1>", unsafe_allow_html=True) 
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{cout_nourriture}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
Formule :
Co√ªts nourriture vendue d‚Äôune p√©riode11/total ventes nourriture de la p√©riode
x100

Int√©r√™t :
Il permet de mesurer le co√ªt des denr√©es utilis√©es dans la confection des plats.
    """)

with col2:
     st.markdown("<h1 style=' font-size: 30px;'>üéØLe cout boisson(par mois)</h1>", unsafe_allow_html=True)
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{cout_boisson}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
 Formule :
Co√ªts boissons vendues d‚Äôune p√©riode/total ventes boissons de la p√©riode x100

Int√©r√™t :
Il permet de refl√©ter l‚Äôensemble des co√ªts boissons et nourritures comprise dans
les boissons

    """)
       

col1,col2 =st.columns(2)
with col1:
     st.markdown("<h1 style=' font-size: 30px;'>üéØLe cout matiere(par mois)</h1>", unsafe_allow_html=True) 
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{cout_matiere}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
 Formule :
Co√ªts F&B d‚Äôune p√©riode/total ventes de la p√©riode x100

Int√©r√™t :
 Co√ªt nourriture vendue=stock d√©but de p√©riode +chats de mati√®res premi√®res ‚Äìstock
fin de p√©riode-repas personnel-offerts
Il permet √† l‚Äôentreprise de mieux suivre le premier de ses co√ªts principaux

    """)

with col2:
     st.markdown("<h1 style=' font-size: 30px;'>üéØEfficacite du personnel(par mois)</h1>", unsafe_allow_html=True)
     st.write(f"<h1 style='text-align: center; color: rgb(0, 255, 255);'>{efficacite_personnel}</h1>", unsafe_allow_html=True)
     with st.expander("üîëexplexation"):
       st.write("""
 Formule :
Total d‚Äôheures travaill√©es sur une p√©riode/total de couverts sur la m√™me p√©riode

Int√©r√™t :
Il d√©termine le co√ªt, en temps, de chaque couvert
    """)      
st.title("df_personnel_filtre")
st.write(df_personnel_filtre)
st.title("df__couts_sortie _marchandies_filtree")
st.write(df_couts_s_filtre)
st.title("df_salaries_etage")
st.write(df_salaries_etage)


#---------------------------------------------------------------------------------------------------------------------------------------------------------

st.write("-------------------------------")

col1, col2,col3 = st.columns(3)
with col1:
    st.markdown("<h1 style=' color: rgb(0, 255, 255); font-size: 20px;'>üî∏realise par </h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color: rgb(255, 255, 255); font-size: 20px; : ;'>iheb turki & wael barhoumi</h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color: rgb(0, 255, 255); font-size: 20px;'>üî∏encadre par </h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color: rgb(255, 255, 255); font-size: 20px; : ;'>M.saloua banie</h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color: rgb(0, 255, 255); font-size: 20px; : ;'>üî∏entrprise d'aceuil </h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color: rgb(255, 255, 255); font-size: 20px; : ;'>Medina Solaria And Thalasso</h1>", unsafe_allow_html=True)

    

with col3:
    logo_iset =  Image.open("logo_isetn.png")
    st.image(logo_iset,
        width=400,
    )



